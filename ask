#!/usr/bin/env python3
# -*- coding:utf8 -*-

import sys
import pprint

import preprocess as st
from predicate_framework import PredicateFinder
from wh_ask import WhQuestionGenerator
from ranker import Ranker
from binary_ask import BinaryQuestionGenerator


pp = pprint.PrettyPrinter()

class QuestionRunner:

    def __init__(self, doc, avg_coref_len, *generators):
        pf = PredicateFinder()
        self.predicates = pf.find_predicates(doc)

        self.avg_coref_len = avg_coref_len

        self.generators = generators

        self.questions = []

    def generate_questions(self, N):
        question_bins = [gen.ask(self.predicates) for gen in self.generators]

        self.save_questions(question_bins)

        rankers = [Ranker(questions, self.avg_coref_len) for questions in question_bins]

        # round-robin print from ranker bins
        for i in range(N):
            j = i % len(rankers)

            question = rankers[j].pop_and_reinsert()
            print(question.q_string)

    def save_questions(self, question_bins):
        # saves all generated questions (unordered) to a property so QA can use them
 
        for questions in question_bins:
            for question in questions:
                self.questions.append(question)

def main(text, n_questions):

    # Instantiate our preprocessor and get the processed doc
    preprocessor = st.Preprocessor(text)
    processed_doc = preprocessor.doc

    # get the avg coref len of the doc (to pass to rankers)
    avg_coref_len = preprocessor.avg_coref_len

    # Instantiate our question generators
    wh_gen = WhQuestionGenerator()
    binary_gen = BinaryQuestionGenerator()

    # Instantiate our question runner
    question_generator = QuestionRunner(processed_doc,
                                        avg_coref_len,
                                        wh_gen,
                                        binary_gen)

    # Final print output
    question_generator.generate_questions(n_questions)

if __name__ == "__main__":

    # Ensure 2 arguments
    if len(sys.argv) != 3:
        print("Usage: ./ask ARTICLE_TXT NUM_QUESTIONS")
        sys.exit(1)

    # Read string from 1 text file. 
    # TODO: extend this to a directory of files
    INPUT_TXT = sys.argv[1]

    # validate that n_questions is an integer
    if not sys.argv[2].isdigit():
        print("NUM_QUESTIONS must be an integer")
        sys.exit(1)

    N_QUESTIONS = int(sys.argv[2])

    with open(INPUT_TXT, 'r') as file:
        TEXT = file.read()

    main(TEXT, N_QUESTIONS)
