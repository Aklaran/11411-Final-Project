#!/usr/bin/env python3
# -*- coding:utf8 -*-

import sys
import os
import string

import preprocess as st
from predicate_framework import Predicate, PredicateFinder
from ranker import Ranker
from question import Question
from utils import *
from binary_ask import BinaryQuestionGenerator
import pprint as pprint

pp = pprint.PrettyPrinter()

class QuestionGenerator:

    def __init__(self, doc):
        pf = PredicateFinder()
        self.predicates = pf.find_predicates(doc)

    def generateWhQuestions(self):
        output = []

        for pred in self.predicates:
            # make questions where answer is sentence subject
            # getting last index of verb list *probably* gets the most operant verb
            if pred.verb[-1].lemma_ == 'be':
                output.append(self.existential_q_from(pred))
            
            # make questions where answer is sentence object
            output.append(self.simple_predicate_q_from(pred))

        # set to remove duplicates, list to remain subscriptable
        output = filter(None, output) # filter out invalid questions
        return list(set(output))
        
    def existential_q_from(self, predicate):
        vp = str_from_token_lst(predicate.verb).strip()
        subj = str_from_token_lst(predicate.subj).strip()
        wh_word = predicate.wh_word
        obj = str_from_token_lst(predicate.obj).strip()

        q_str = ' '.join([wh_word, vp, subj]) + '?'

        question = Question(q_str, wh_word.upper(), obj)
        question.add_sentence(predicate.sentence)
        if question.is_valid():
            return question

        return None

    def simple_predicate_q_from(self, predicate):
        vp = str_from_token_lst(predicate.verb).strip()
        subj = str_from_token_lst(predicate.subj).strip()
        subj_ent = str_from_token_lst(predicate.subj_ent).strip()
        wh_word = predicate.wh_word
        obj = str_from_token_lst(predicate.obj).strip()

        q_str = ' '.join([wh_word, vp, obj]) + '?'

        question = Question(q_str, wh_word.upper(), subj_ent)
        question.add_sentence(predicate.sentence)
        if question.is_valid():
            return question

        return None

def blockPrint():
    sys.stdout = open(os.devnull, 'w')

def enablePrint():
    sys.stdout = sys.__stdout__

if __name__ == "__main__":
    # Suppress printing until we show output
    # REMOVE THIS IF YOU'RE HAVING PROBLEMS
    # blockPrint()

    # Ensure 2 arguments
    if len(sys.argv) != 3:
        print("Usage: ./ask ARTICLE_TXT NUM_QUESTIONS")
        sys.exit(1)

    # Read string from 1 text file. 
    # TODO: extend this to a directory of files
    INPUT_TXT = sys.argv[1]

    # validate that n_questions is an integer
    if not sys.argv[2].isdigit():
        print("NUM_QUESTIONS must be an integer")
        sys.exit(1)

    N_QUESTIONS = int(sys.argv[2])

    with open(INPUT_TXT, 'r') as file:
        text = file.read()

    # Instantiate our preprocessor and get the processed doc

    # DEBUG
    #preprocessor = st.Preprocessor('The Guardian suggested that the goal "might become the most famous goal in Fulham\'s history". The goal propelled Dempsey to become the most prolific USA goalscorer in the Premier League, passing Fulham legend and fellow American Brian McBride. Music\nOne of Dempsey\'s passions outside of soccer is hip hop music. New England Revolution\nNew England Revolution selected Clint Dempsey eighth overall in the 2004 MLS SuperDraft.')
    # /DEBUG

    preprocessor = st.Preprocessor(text)
    processed_doc = preprocessor.doc

    # Instantiate our wh-question generator and make some questions
    question_generator = QuestionGenerator(processed_doc)

    wh_questions = question_generator.generateWhQuestions()
    # # for i in range(N_QUESTIONS):
    # #     j = i % len(wh_questions)
    # #     print(wh_questions[j])
    
    # debug line; remove for prod
    # print(len(wh_questions))
    # for question in wh_questions: 
    #     print(question.q_string)
    #     print(question.q_class)
    #     print(question.q_answer)
    #     print()

    n, l = 0, 0
    for cluster in processed_doc._.coref_clusters:
        n += 1
        l += len(cluster)
    avg_coref_len = 0 if (n == 0) else l/n

    print("WH-RANKING")

    wh_ranking = Ranker(wh_questions, avg_coref_len)
    wh_ranking.rank()
    wh_ranking.sort()
    for i in range(int((N_QUESTIONS+1)/2)):
        new_wh_question = wh_ranking.pop_and_reinsert()
        print(new_wh_question[0].q_string)
        # print(new_wh_question[0].q_class)
        # print(new_wh_question[0].q_answer)
        # print(new_wh_question[1])
        # print()

    # Instantiate our wh-question generator and make some questions
    binary_question_generator = BinaryQuestionGenerator(processed_doc)

    binary_questions = binary_question_generator.generateBinaryQuestions()

    print("BINARY RANKING")

    bi_ranking = Ranker(binary_questions, avg_coref_len)
    bi_ranking.rank()
    bi_ranking.sort()
    for i in range(int(N_QUESTIONS/2)):
        new_bi_question = bi_ranking.pop_and_reinsert()
        print(new_bi_question[0].q_string)
        # print(new_bi_question[0].q_class)
        # print(new_bi_question[0].q_answer)
        # print(new_bi_question[1])
        # print()